# Specify the Docker Compose file format version.
# version: '3.8'   # I had to comment this to stop warning

# Define the services (containers) that make up your application.
services:
  # Django Web Application Service
  web:
    # Build the Docker image for this service using the Dockerfile in the current directory.
    build: .
    # Override the default command in the Dockerfile.
    # This command:
    # 1. Runs Django's collectstatic to gather all static files.
    # 2. Runs Django's migrate to apply database migrations.
    # 3. Starts the Gunicorn WSGI server.
    command: bash -c "python manage.py collectstatic --noinput && python manage.py migrate --noinput && gunicorn tts_project.wsgi:application --bind 0.0.0.0:8000"
    # Mount local directories into the container for development purposes.
    volumes:
      - .:/app # Mount the entire project root for live code changes.
      - media_data:/app/media # Persistent volume for user-uploaded media files.
      - static_data:/app/static_cdn # Persistent volume for collected static files.
    # Map port 8000 on the host machine to port 8000 inside the container.
    ports:
      - "8000:8000"
    # Load environment variables from the .env file in the project root.
    env_file:
      - .env
    # Define dependencies: 'web' service will start only after 'db' and 'redis' are healthy.
    depends_on:
      - db
      - redis
    # Connect this service to our custom Docker network.
    networks:
      - app_network

  # Celery Worker Service
  celery_worker:
    # Build from the same Dockerfile as the 'web' service.
    build: .
    # Command to start the Celery worker, pointing to tts_project.settings.celery instead of the Django project.
    # OLD: command: celery -A tts_project worker -l info
    command: celery -A tts_project.settings.celery worker -l info # <--- UPDATED LINE HERE
    # Mount local directories for the worker to access code and media.
    volumes:
      - .:/app
      - media_data:/app/media
    # Load environment variables.
    env_file:
      - .env
    # Celery worker depends on the web service (to ensure migrations are run first) and Redis (as broker).
    depends_on:
      - web
      - redis
    # Connect to the custom Docker network.
    networks:
      - app_network

  # Redis Service (Used as Celery Message Broker and for Caching)
  redis:
    # Use the official Redis image (version 7, based on Alpine for small size).
    image: redis:7-alpine
    # Map Redis's default port 6379 on the host to the container.
    ports:
      - "6379:6379"
    # Persistent volume for Redis data.
    volumes:
      - redis_data:/data
    # Connect to the custom Docker network.
    networks:
      - app_network

  # PostgreSQL Database Service (for local development)
  db:
    # Use the official PostgreSQL image (version 15, based on Alpine for small size).
    image: postgres:15-alpine
    # Persistent volume for PostgreSQL database files.
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Set environment variables for PostgreSQL configuration (pulled from .env via 'web' and 'celery_worker' services).
    # These are specific to the postgres image for initial database setup.
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # Map PostgreSQL's default port 5432 on the host to the container.
    ports:
      - "5432:5432"
    # Connect to the custom Docker network.
    networks:
      - app_network

# Define named volumes for persistent data storage.
# Data in these volumes will persist even if containers are removed.
volumes:
  pg_data:    # For PostgreSQL database files
  redis_data: # For Redis data
  media_data: # For user-uploaded media files
  static_data: # For Django collected static files

# Define a custom bridge network for internal communication between services.
# This allows services to refer to each other by their service names (e.g., 'db', 'redis').
networks:
  app_network:
    driver: bridge